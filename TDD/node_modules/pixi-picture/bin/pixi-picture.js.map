{"version":3,"file":"pixi-picture.js","sourceRoot":"","sources":["../src/PictureShader.ts","../src/HardLightShader.ts","../src/mapFilterBlendModesToPixi.ts","../src/NormalShader.ts","../src/OverlayShader.ts","../src/PictureRenderer.ts","../src/PictureSprite.ts","../src/PictureTilingSprite.ts"],"names":[],"mappings":"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","sourcesContent":["module PIXI.extras {\r\n    interface InnerLib {\r\n        vertUniforms: string,\r\n        vertCode: string,\r\n        fragUniforms: string,\r\n        fragCode: string\r\n    }\r\n\r\n    var shaderLib: InnerLib[] = [\r\n        {\r\n            vertUniforms: \"\",\r\n            vertCode: \"vTextureCoord = aTextureCoord;\",\r\n            fragUniforms: \"uniform vec4 uTextureClamp;\",\r\n            fragCode: \"vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\"\r\n        },\r\n        {\r\n            //DOES HAVE translationMatrix\r\n            vertUniforms: \"uniform mat3 uTransform;\",\r\n            vertCode: \"vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\",\r\n            fragUniforms: \"\",\r\n            fragCode: \"vec2 textureCoord = vTextureCoord;\"\r\n        },\r\n        {\r\n            //DOES HAVE translationMatrix\r\n            vertUniforms: \"uniform mat3 uTransform;\",\r\n            vertCode: \"vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\",\r\n            fragUniforms: \"uniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\",\r\n            fragCode: \"vec2 textureCoord = mod(vTextureCoord - uClampOffset, vec2(1.0, 1.0)) + uClampOffset;\" +\r\n            \"\\ntextureCoord = (uMapCoord * vec3(textureCoord, 1.0)).xy;\" +\r\n            \"\\ntextureCoord = clamp(textureCoord, uClampFrame.xy, uClampFrame.zw);\"\r\n        }\r\n    ];\r\n\r\n    export class PictureShader extends PIXI.Shader {\r\n\r\n        tempQuad: Quad;\r\n        tilingMode: number;\r\n\r\n        static blendVert = `\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute vec4 aColor;\r\n\r\nuniform mat3 projectionMatrix;\r\nuniform mat3 mapMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying vec2 vMapCoord;\r\n%SPRITE_UNIFORMS%\r\n\r\nvoid main(void)\r\n{\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    %SPRITE_CODE%\r\n    vMapCoord = (mapMatrix * vec3(aVertexPosition, 1.0)).xy;\r\n}\r\n`;\r\n\r\n        /**\r\n         * @class\r\n         * @extends PIXI.Shader\r\n         * @memberof PIXI.extras\r\n         * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n         * @param vert {string}\r\n         * @param frag {string}\r\n         * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\r\n         */\r\n        constructor(gl: WebGLRenderingContext, vert: string, frag: string, tilingMode: number) {\r\n            var lib = shaderLib[tilingMode];\r\n            super(gl,\r\n                vert.replace(/%SPRITE_UNIFORMS%/gi, lib.vertUniforms)\r\n                    .replace(/%SPRITE_CODE%/gi, lib.vertCode),\r\n                frag.replace(/%SPRITE_UNIFORMS%/gi, lib.fragUniforms)\r\n                    .replace(/%SPRITE_CODE%/gi, lib.fragCode));\r\n\r\n            this.bind()\r\n            this.tilingMode = tilingMode;\r\n            this.tempQuad = new Quad(gl);\r\n            this.tempQuad.initVao(this);\r\n\r\n            this.uniforms.uColor = new Float32Array([1,1,1,1]);\r\n            this.uniforms.uSampler = [0, 1];\r\n        }\r\n    }\r\n}\r\n","/// <reference types=\"pixi.js\" />\r\n/// <reference path=\"PictureShader.ts\" />\r\n\r\nmodule PIXI.extras {\r\n    var overlayFrag = `\r\nvarying vec2 vTextureCoord;\r\nvarying vec2 vMapCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform sampler2D uSampler[2];\r\nuniform vec4 uColor;\r\n%SPRITE_UNIFORMS%\r\n\r\nvoid main(void)\r\n{\r\n    %SPRITE_CODE%\r\n    vec4 source = texture2D(uSampler[0], textureCoord) * uColor;\r\n    vec4 target = texture2D(uSampler[1], vMapCoord);\r\n\r\n    //reverse hardlight\r\n    if (source.a == 0.0) {\r\n        gl_FragColor = vec4(0, 0, 0, 0);\r\n        return;\r\n    }\r\n    //yeah, premultiplied\r\n    vec3 Cb = source.rgb/source.a, Cs;\r\n    if (target.a > 0.0) {\r\n        Cs = target.rgb / target.a;\r\n    }\r\n    vec3 multiply = Cb * Cs * 2.0;\r\n    vec3 Cs2 = Cs * 2.0 - 1.0;\r\n    vec3 screen = Cb + Cs2 - Cb * Cs2;\r\n    vec3 B;\r\n    if (Cb.r <= 0.5) {\r\n        B.r = multiply.r;\r\n    } else {\r\n        B.r = screen.r;\r\n    }\r\n    if (Cb.g <= 0.5) {\r\n        B.g = multiply.g;\r\n    } else {\r\n        B.g = screen.g;\r\n    }\r\n    if (Cb.b <= 0.5) {\r\n        B.b = multiply.b;\r\n    } else {\r\n        B.b = screen.b;\r\n    }\r\n    vec4 res;\r\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\r\n    res.a = source.a + target.a * (1.0-source.a);\r\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\r\n}\r\n`;\r\n\r\n    /**\r\n     * @class\r\n     * @extends PIXI.Shader\r\n     * @memberof PIXI.extras\r\n     * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n     * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\r\n     */\r\n    export class HardLightShader extends PictureShader {\r\n        constructor(gl: WebGLRenderingContext, tilingMode: number) {\r\n            super(gl, PictureShader.blendVert, overlayFrag, tilingMode);\r\n        }\r\n    }\r\n}\r\n","module PIXI.extras {\r\n    export function mapFilterBlendModesToPixi(gl: WebGLRenderingContext, array: Array<Array<PictureShader>> = []): Array<Array<PictureShader>>\r\n    {\r\n        //TODO - premultiply alpha would be different.\r\n        //add a boolean for that!\r\n        array[PIXI.BLEND_MODES.OVERLAY] = [new OverlayShader(gl, 0), new OverlayShader(gl, 1), new OverlayShader(gl, 2)];\r\n        array[PIXI.BLEND_MODES.HARD_LIGHT] = [new HardLightShader(gl, 0), new HardLightShader(gl, 1), new HardLightShader(gl, 2)];\r\n\r\n        return array;\r\n    }\r\n}\r\n","\r\n\r\nmodule PIXI.extras {\r\n\r\n    var normalFrag = `\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform sampler2D uSampler[2];\r\nuniform vec4 uColor;\r\n%SPRITE_UNIFORMS%\r\n\r\nvoid main(void)\r\n{\r\n    %SPRITE_CODE%\r\n\r\n    vec4 sample = texture2D(uSampler[0], textureCoord);\r\n    gl_FragColor = sample * uColor;\r\n}\r\n`;\r\n\r\n    var normalVert = `\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute vec4 aColor;\r\n\r\nuniform mat3 projectionMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\n%SPRITE_UNIFORMS%\r\n\r\nvoid main(void)\r\n{\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    %SPRITE_CODE%\r\n}\r\n`;\r\n\r\n    export class NormalShader extends PictureShader {\r\n        /**\r\n         * @class\r\n         * @extends PIXI.Shader\r\n         * @memberof PIXI.extras\r\n         * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n         * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\r\n         */\r\n        constructor(gl: WebGLRenderingContext, tilingMode: number) {\r\n            super(gl, normalVert, normalFrag, tilingMode);\r\n        }\r\n    }\r\n}\r\n","module PIXI.extras {\r\n    var overlayFrag = `\r\nvarying vec2 vTextureCoord;\r\nvarying vec2 vMapCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform sampler2D uSampler[2];\r\nuniform vec4 uColor;\r\n%SPRITE_UNIFORMS%\r\n\r\nvoid main(void)\r\n{\r\n    %SPRITE_CODE%\r\n    vec4 source = texture2D(uSampler[0], textureCoord) * uColor;\r\n    vec4 target = texture2D(uSampler[1], vMapCoord);\r\n\r\n    //reverse hardlight\r\n    if (source.a == 0.0) {\r\n        gl_FragColor = vec4(0, 0, 0, 0);\r\n        return;\r\n    }\r\n    //yeah, premultiplied\r\n    vec3 Cb = source.rgb/source.a, Cs;\r\n    if (target.a > 0.0) {\r\n        Cs = target.rgb / target.a;\r\n    }\r\n    vec3 multiply = Cb * Cs * 2.0;\r\n    vec3 Cb2 = Cb * 2.0 - 1.0;\r\n    vec3 screen = Cb2 + Cs - Cb2 * Cs;\r\n    vec3 B;\r\n    if (Cs.r <= 0.5) {\r\n        B.r = multiply.r;\r\n    } else {\r\n        B.r = screen.r;\r\n    }\r\n    if (Cs.g <= 0.5) {\r\n        B.g = multiply.g;\r\n    } else {\r\n        B.g = screen.g;\r\n    }\r\n    if (Cs.b <= 0.5) {\r\n        B.b = multiply.b;\r\n    } else {\r\n        B.b = screen.b;\r\n    }\r\n    vec4 res;\r\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\r\n    res.a = source.a + target.a * (1.0-source.a);\r\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\r\n}\r\n`;\r\n\r\n    /**\r\n     * @class\r\n     * @extends PIXI.Shader\r\n     * @memberof PIXI.extras\r\n     * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n     * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\r\n     */\r\n    export class OverlayShader extends PictureShader {\r\n        constructor(gl: WebGLRenderingContext, tilingMode: number) {\r\n            super(gl, PictureShader.blendVert, overlayFrag, tilingMode);\r\n        }\r\n    }\r\n}\r\n","module PIXI.extras {\r\n    function nextPow2(v: number): number {\r\n        v += (v === 0)?1:0;\r\n        --v;\r\n        v |= v >>> 1;\r\n        v |= v >>> 2;\r\n        v |= v >>> 4;\r\n        v |= v >>> 8;\r\n        v |= v >>> 16;\r\n        return v + 1;\r\n    }\r\n\r\n    export class PictureRenderer extends ObjectRenderer {\r\n        constructor(renderer: WebGLRenderer) {\r\n            super(renderer)\r\n        }\r\n\r\n        drawModes: Array<Array<PictureShader>>;\r\n        normalShader: Array<PictureShader>;\r\n        _tempClamp: Float32Array;\r\n        _tempColor: Float32Array;\r\n        _tempRect: PIXI.Rectangle;\r\n        _tempRect2: PIXI.Rectangle;\r\n        _tempRect3: PIXI.Rectangle;\r\n        _tempMatrix: PIXI.Matrix;\r\n        _tempMatrix2: PIXI.Matrix;\r\n        _bigBuf: Uint8Array;\r\n        _renderTexture: PIXI.BaseRenderTexture;\r\n\r\n        onContextChange() {\r\n            const gl = this.renderer.gl;\r\n            this.drawModes = mapFilterBlendModesToPixi(gl);\r\n            this.normalShader = [new NormalShader(gl, 0), new NormalShader(gl, 1), new NormalShader(gl, 2)];\r\n            this._tempClamp = new Float32Array(4);\r\n            this._tempColor = new Float32Array(4);\r\n            this._tempRect = new PIXI.Rectangle();\r\n            this._tempRect2 = new PIXI.Rectangle();\r\n            this._tempRect3 = new PIXI.Rectangle();\r\n            this._tempMatrix = new PIXI.Matrix();\r\n            this._tempMatrix2 = new PIXI.Matrix();\r\n            this._bigBuf = new Uint8Array(1 << 20);\r\n            this._renderTexture = new PIXI.BaseRenderTexture(1024, 1024);\r\n        }\r\n\r\n        start() {\r\n\r\n        }\r\n\r\n        flush() {\r\n\r\n        }\r\n\r\n        _getRenderTexture(minWidth: number, minHeight: number) {\r\n            if (this._renderTexture.width < minWidth ||\r\n                this._renderTexture.height < minHeight) {\r\n                minHeight = nextPow2(minWidth);\r\n                minHeight = nextPow2(minHeight);\r\n                this._renderTexture.resize(minWidth, minHeight);\r\n            }\r\n            return this._renderTexture;\r\n        }\r\n\r\n        _getBuf(size: number): Float32Array {\r\n            let buf = this._bigBuf;\r\n            if (buf.length < size) {\r\n                size = nextPow2(size);\r\n                buf = new Uint8Array(size);\r\n                this._bigBuf = buf;\r\n            }\r\n            return buf;\r\n        }\r\n\r\n        render(sprite: Sprite) {\r\n            if (!sprite.texture.valid) {\r\n                return;\r\n            }\r\n            let tilingMode = 0;\r\n            if ((sprite as any).tileTransform) {\r\n                //for Sprite\r\n                tilingMode = this._isSimpleSprite(sprite) ? 1 : 2;\r\n            }\r\n\r\n            const blendShader = this.drawModes[sprite.blendMode];\r\n            if (blendShader) {\r\n                this._renderBlend(sprite, blendShader[tilingMode]);\r\n            } else {\r\n                this._renderNormal(sprite, this.normalShader[tilingMode]);\r\n            }\r\n        }\r\n\r\n        _renderNormal(sprite: Sprite, shader: PictureShader) {\r\n            const renderer = this.renderer;\r\n            renderer.bindShader(shader);\r\n            renderer.state.setBlendMode(sprite.blendMode);\r\n            this._renderInner(sprite, shader);\r\n        }\r\n\r\n        _renderBlend(sprite: Sprite, shader: PictureShader) {\r\n            //nothing there yet\r\n            const renderer = this.renderer;\r\n            const spriteBounds = sprite.getBounds();\r\n            const renderTarget = renderer._activeRenderTarget;\r\n            const matrix = renderTarget.projectionMatrix;\r\n            const flipX = matrix.a < 0;\r\n            const flipY = matrix.d < 0;\r\n            const resolution = renderTarget.resolution;\r\n            const screen = this._tempRect;\r\n            const fr = renderTarget.sourceFrame || renderTarget.destinationFrame;\r\n            screen.x = 0;\r\n            screen.y = 0;\r\n            screen.width = fr.width;\r\n            screen.height = fr.height;\r\n\r\n            const bounds = this._tempRect2;\r\n            const fbw = fr.width * resolution, fbh = fr.height * resolution;\r\n            bounds.x = (spriteBounds.x + matrix.tx / matrix.a) * resolution + fbw / 2;\r\n            bounds.y = (spriteBounds.y + matrix.ty / matrix.d) * resolution + fbh / 2;\r\n            bounds.width = spriteBounds.width * resolution;\r\n            bounds.height = spriteBounds.height * resolution;\r\n            if (flipX) {\r\n                bounds.y = fbw - bounds.width - bounds.x;\r\n            }\r\n            if (flipY) {\r\n                bounds.y = fbh - bounds.height - bounds.y;\r\n            }\r\n\r\n            const screenBounds = this._tempRect3;\r\n            const x_1 = Math.floor(Math.max(screen.x, bounds.x));\r\n            const x_2 = Math.ceil(Math.min(screen.x + screen.width, bounds.x + bounds.width));\r\n            const y_1 = Math.floor(Math.max(screen.y, bounds.y));\r\n            const y_2 = Math.ceil(Math.min(screen.y + screen.height, bounds.y + bounds.height));\r\n            const pixelsWidth = x_2 - x_1;\r\n            const pixelsHeight = y_2 - y_1;\r\n            if (pixelsWidth <= 0 || pixelsHeight <= 0) {\r\n                //culling\r\n                return;\r\n            }\r\n            //TODO: padding\r\n            const rt = this._getRenderTexture(pixelsWidth, pixelsHeight);\r\n            renderer.bindTexture(rt, 1, true);\r\n            const gl = renderer.gl;\r\n            if (renderer.renderingToScreen && renderTarget.root) {\r\n                const buf = this._getBuf(pixelsWidth * pixelsHeight * 4);\r\n                gl.readPixels(x_1, y_1, pixelsWidth, pixelsHeight, gl.RGBA, gl.UNSIGNED_BYTE, this._bigBuf);\r\n                //REVERT Y?\r\n                gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixelsWidth, pixelsHeight, gl.RGBA, gl.UNSIGNED_BYTE, this._bigBuf);\r\n            } else {\r\n                gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x_1, y_1, pixelsWidth, pixelsHeight);\r\n            }\r\n\r\n            renderer.bindShader(shader);\r\n            renderer.state.setBlendMode(PIXI.BLEND_MODES.NORMAL);\r\n            if (shader.uniforms.mapMatrix) {\r\n                const mapMatrix = this._tempMatrix;\r\n                mapMatrix.a = bounds.width / rt.width / spriteBounds.width;\r\n                if (flipX) {\r\n                    mapMatrix.a = -mapMatrix.a;\r\n                    mapMatrix.tx = (bounds.x - x_1) / rt.width - (spriteBounds.x + spriteBounds.width) * mapMatrix.a;\r\n                } else {\r\n                    mapMatrix.tx = (bounds.x - x_1) / rt.width - spriteBounds.x * mapMatrix.a;\r\n                }\r\n                mapMatrix.d = bounds.height / rt.height / spriteBounds.height;\r\n                if (flipY) {\r\n                    mapMatrix.d = -mapMatrix.d;\r\n                    mapMatrix.ty = (bounds.y - y_1) / rt.height - (spriteBounds.y + spriteBounds.height) * mapMatrix.d;\r\n                } else {\r\n                    mapMatrix.ty = (bounds.y - y_1) / rt.height - spriteBounds.y * mapMatrix.d;\r\n                }\r\n\r\n                shader.uniforms.mapMatrix = mapMatrix.toArray(true);\r\n            }\r\n\r\n            this._renderInner(sprite, shader);\r\n        }\r\n\r\n        _renderInner(sprite: Sprite, shader: PictureShader) {\r\n            const renderer = this.renderer;\r\n            if (shader.tilingMode > 0) {\r\n                this._renderWithShader(sprite as TilingSprite, shader.tilingMode === 1, shader);\r\n            } else {\r\n                this._renderSprite(sprite, shader);\r\n            }\r\n        }\r\n\r\n        _renderWithShader(ts: TilingSprite, isSimple: boolean, shader: PictureShader) {\r\n            const quad = shader.tempQuad;\r\n            const renderer = this.renderer;\r\n            renderer.bindVao(quad.vao);\r\n            let vertices = quad.vertices;\r\n\r\n            const _width: number = (ts as any)._width;\r\n            const _height: number = (ts as any)._height;\r\n            const _anchorX: number = (ts as any)._anchor._x;\r\n            const _anchorY: number = (ts as any)._anchor._y;\r\n\r\n            const w0 = _width * (1 - _anchorX);\r\n            const w1 = _width * -_anchorX;\r\n\r\n            const h0 = _height * (1 - _anchorY);\r\n            const h1 = _height * -_anchorY;\r\n\r\n            const wt = ts.transform.worldTransform;\r\n\r\n            const a = wt.a;\r\n            const b = wt.b;\r\n            const c = wt.c;\r\n            const d = wt.d;\r\n            const tx = wt.tx;\r\n            const ty = wt.ty;\r\n\r\n            vertices[0] = (a * w1) + (c * h1) + tx;\r\n            vertices[1] = (d * h1) + (b * w1) + ty;\r\n\r\n            vertices[2] = (a * w0) + (c * h1) + tx;\r\n            vertices[3] = (d * h1) + (b * w0) + ty;\r\n\r\n            vertices[4] = (a * w0) + (c * h0) + tx;\r\n            vertices[5] = (d * h0) + (b * w0) + ty;\r\n\r\n            vertices[6] = (a * w1) + (c * h0) + tx;\r\n            vertices[7] = (d * h0) + (b * w1) + ty;\r\n\r\n            vertices = quad.uvs;\r\n\r\n            vertices[0] = vertices[6] = -ts.anchor.x;\r\n            vertices[1] = vertices[3] = -ts.anchor.y;\r\n\r\n            vertices[2] = vertices[4] = 1.0 - ts.anchor.x;\r\n            vertices[5] = vertices[7] = 1.0 - ts.anchor.y;\r\n\r\n            quad.upload();\r\n\r\n            const tex = (ts as any)._texture;\r\n            const lt = ts.tileTransform.localTransform;\r\n            const uv = ts.uvTransform;\r\n            const mapCoord : Matrix = (uv as any).mapCoord;\r\n            const uClampFrame : Float32Array = (uv as any).uClampFrame;\r\n            const uClampOffset : Float32Array = (uv as any).uClampOffset;\r\n\r\n            const w = tex.width;\r\n            const h = tex.height;\r\n            const W = _width;\r\n            const H = _height;\r\n\r\n            const tempMat = this._tempMatrix2;\r\n\r\n            tempMat.set(lt.a * w / W,\r\n                lt.b * w / H,\r\n                lt.c * h / W,\r\n                lt.d * h / H,\r\n                lt.tx / W,\r\n                lt.ty / H);\r\n\r\n            // that part is the same as above:\r\n            // tempMat.identity();\r\n            // tempMat.scale(tex.width, tex.height);\r\n            // tempMat.prepend(lt);\r\n            // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\r\n\r\n            tempMat.invert();\r\n            if (isSimple) {\r\n                tempMat.append(mapCoord);\r\n            }\r\n            else {\r\n                shader.uniforms.uMapCoord = mapCoord.toArray(true);\r\n                shader.uniforms.uClampFrame = uClampFrame;\r\n                shader.uniforms.uClampOffset = uClampOffset;\r\n            }\r\n            shader.uniforms.uTransform = tempMat.toArray(true);\r\n\r\n            const color = this._tempColor;\r\n            const alpha = ts.worldAlpha;\r\n\r\n            PIXI.utils.hex2rgb(ts.tint, color as any);\r\n            color[0] *= alpha;\r\n            color[1] *= alpha;\r\n            color[2] *= alpha;\r\n            color[3] = alpha;\r\n            shader.uniforms.uColor = color;\r\n\r\n            renderer.bindTexture(tex, 0, true);\r\n            quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);\r\n        }\r\n\r\n        _renderSprite(sprite: Sprite, shader: PictureShader) {\r\n            const renderer = this.renderer;\r\n            const quad = shader.tempQuad;\r\n            renderer.bindVao(quad.vao);\r\n            const uvs : TextureUvs = (sprite.texture as any)._uvs;\r\n\r\n            //sprite already has calculated the vertices. lets transfer them to quad\r\n\r\n            const vertices = quad.vertices;\r\n            const vd : Float32Array = sprite.vertexData;\r\n            for (let i = 0; i < 8; i++) {\r\n                quad.vertices[i] = vd[i];\r\n            }\r\n\r\n            //SpriteRenderer works differently, with uint32 UVS\r\n            //but for our demo float uvs are just fine\r\n            quad.uvs[0] = uvs.x0;\r\n            quad.uvs[1] = uvs.y0;\r\n            quad.uvs[2] = uvs.x1;\r\n            quad.uvs[3] = uvs.y1;\r\n            quad.uvs[4] = uvs.x2;\r\n            quad.uvs[5] = uvs.y2;\r\n            quad.uvs[6] = uvs.x3;\r\n            quad.uvs[7] = uvs.y3;\r\n\r\n            //TODO: add baricentric coords here\r\n            quad.upload();\r\n\r\n            const frame = sprite.texture.frame;\r\n            const base = sprite.texture.baseTexture;\r\n            const clamp = this._tempClamp;\r\n            //clamping 0.5 pixel from each side to reduce border artifact\r\n            //this is our plugin main purpose\r\n            const eps = 0.5 / base.resolution;\r\n            clamp[0] = (frame.x + eps) / base.width;\r\n            clamp[1] = (frame.y + eps) / base.height;\r\n            clamp[2] = (frame.x + frame.width - eps) / base.width;\r\n            clamp[3] = (frame.y + frame.height - eps) / base.height;\r\n            //take a notice that size in pixels is realWidth,realHeight\r\n            //width and height are divided by resolution\r\n            shader.uniforms.uTextureClamp = clamp;\r\n\r\n            const color = this._tempColor;\r\n            PIXI.utils.hex2rgb(sprite.tint, color as any);\r\n            const alpha = sprite.worldAlpha;\r\n            //premultiplied alpha tint\r\n            //of course we could do that in shader too\r\n            color[0] *= alpha;\r\n            color[1] *= alpha;\r\n            color[2] *= alpha;\r\n            color[3] = alpha;\r\n            shader.uniforms.uColor = color;\r\n\r\n            //bind texture to unit 0, our default sampler unit\r\n            renderer.bindTexture(base, 0, true);\r\n            quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);\r\n        }\r\n\r\n        _isSimpleSprite(ts: Sprite): boolean {\r\n            const renderer = this.renderer;\r\n            const tex : Texture = (ts as any)._texture;\r\n            const baseTex = tex.baseTexture;\r\n            let isSimple = (baseTex as any).isPowerOfTwo && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\r\n\r\n            // auto, force repeat wrapMode for big tiling textures\r\n            if (isSimple) {\r\n                if (!(baseTex as any)._glTextures[renderer.CONTEXT_UID]) {\r\n                    if (baseTex.wrapMode === WRAP_MODES.CLAMP) {\r\n                        baseTex.wrapMode = WRAP_MODES.REPEAT;\r\n                    }\r\n                }\r\n                else {\r\n                    isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\r\n                }\r\n            }\r\n\r\n            return isSimple;\r\n        }\r\n    }\r\n\r\n    PIXI.WebGLRenderer.registerPlugin('picture', PictureRenderer);\r\n    PIXI.CanvasRenderer.registerPlugin('picture', CanvasSpriteRenderer);\r\n}\r\n","module PIXI.extras {\r\n    export class PictureSprite extends Sprite {\r\n        constructor(texture: Texture) {\r\n            super(texture);\r\n            this.pluginName = 'picture'\r\n        }\r\n    }\r\n}\r\n","module PIXI.extras {\r\n    export class PictureTilingSprite extends TilingSprite {\r\n        constructor(texture: Texture) {\r\n            super(texture);\r\n            this.pluginName = 'picture'\r\n        }\r\n    }\r\n}\r\n"]}